"""
Telegram –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Telethon –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API
–í–µ—Ä—Å–∏—è 2.0 - —É–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
"""

import asyncio
import os
import hashlib
import json
from datetime import datetime, timedelta
from telethon import TelegramClient, events
from telethon.errors import SessionPasswordNeededError, FloodWaitError
import firebase_admin
from firebase_admin import credentials, firestore
from dotenv import load_dotenv
import logging
import time

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs('logs', exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/telegram_parser.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class TelegramParser:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –ø–∞—Ä—Å–µ—Ä–∞...")
        
        # Telegram API –¥–∞–Ω–Ω—ã–µ
        self.api_id = os.getenv('TELEGRAM_API_ID')
        self.api_hash = os.getenv('TELEGRAM_API_HASH')
        self.session_name = os.getenv('TELEGRAM_SESSION_NAME', 'autologist_session')
        
        if not self.api_id or not self.api_hash:
            logger.error("‚ùå TELEGRAM_API_ID –∏ TELEGRAM_API_HASH –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –¥–∞–Ω–Ω—ã–µ Telegram")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞
        self.client = TelegramClient(self.session_name, int(self.api_id), self.api_hash)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
        self.init_firebase()
        
        # –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.monitored_chats = self.load_monitored_chats()
        
        # –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        self.processed_messages = set()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'messages_processed': 0,
            'messages_saved': 0,
            'errors': 0,
            'start_time': datetime.now()
        }
    
    def init_firebase(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase"""
        try:
            if not firebase_admin._apps:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                project_id = os.getenv('FIREBASE_PROJECT_ID', 'autologist-91ecf')
                
                # –ü—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ credentials –¥–ª—è —á—Ç–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                try:
                    firebase_admin.initialize_app(options={'projectId': project_id})
                    logger.info("‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Project ID")
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                    logger.warning("‚ö†Ô∏è  Firebase credentials –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ")
                    # –ë—É–¥–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ –≤ JSON —Ñ–∞–π–ª—ã
                    self.use_local_storage = True
                    return
            
            self.db = firestore.client()
            self.use_local_storage = False
            logger.info("‚úÖ Firestore –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  Firebase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            logger.info("üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
            self.use_local_storage = True
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
            os.makedirs('data/messages', exist_ok=True)
    
    import os
    import json
    import time

    def load_monitored_chats(self, force_update=False):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–æ–≤ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
        –ï—Å–ª–∏ force_update=True –∏–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª/–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–∑ Firestore.
        """
        CACHE_PATH = 'config/monitored_chats_cache.json'
        CACHE_TTL = 60 * 60  # 1 —á–∞—Å (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if not force_update and os.path.exists(CACHE_PATH):
                mtime = os.path.getmtime(CACHE_PATH)
                if time.time() - mtime < CACHE_TTL:
                    with open(CACHE_PATH, 'r', encoding='utf-8') as f:
                        chats = json.load(f)
                    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(chats)} —á–∞—Ç–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞")
                    return chats
            # –ï—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚Äî –≥—Ä—É–∑–∏–º –∏–∑ Firestore
            from google.cloud import firestore
            db = firestore.Client()
            chats_ref = db.collection('monitored_chats')
            chats = [doc.to_dict() for doc in chats_ref.stream()]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            os.makedirs('config', exist_ok=True)
            with open(CACHE_PATH, 'w', encoding='utf-8') as f:
                json.dump(chats, f, ensure_ascii=False, indent=2)
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(chats)} —á–∞—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑ Firestore –∏ –æ–±–Ω–æ–≤–ª—ë–Ω –∫—ç—à")
            return chats
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}")
            return []

    def force_update_monitored_chats_cache(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ monitored_chats –∏–∑ Firestore"""
        return self.load_monitored_chats(force_update=True)
    
    def create_message_hash(self, text, sender_id, chat_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ö–µ—à–∞ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        hash_string = f"{text}_{sender_id}_{chat_id}"
        return hashlib.md5(hash_string.encode()).hexdigest()
    
    def is_cargo_related(self, text, keywords):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ –≥—Ä—É–∑–∞—Ö"""
        if not text:
            return False, []
        
        text_lower = text.lower()
        found_keywords = []
        
        for keyword in keywords:
            kw = keyword.lower().strip()
            if kw and kw in text_lower:
                found_keywords.append(keyword)
        
        return len(found_keywords) > 0, found_keywords
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –ø–∞—Ä—Å–µ—Ä–∞...")
        
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
            await self.client.start()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            me = await self.client.get_me()
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name} (@{me.username})")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤
            await self.discover_chats()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            self.setup_message_handlers()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            logger.info("üëÅÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π...")
            await self.client.run_until_disconnected()
            
        except SessionPasswordNeededError:
            logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
            raise
    
    async def discover_chats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤"""
        logger.info("üîç –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã –∏ –∫–∞–Ω–∞–ª—ã...")
        
        cargo_keywords = ['–≥—Ä—É–∑', '–ø–µ—Ä–µ–≤–æ–∑–∫–∞', '–¥–æ—Å—Ç–∞–≤–∫–∞', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ª–æ–≥–∏—Å—Ç–∏–∫–∞', '—Ñ—É—Ä–∞', '—Ç–æ–Ω–Ω']
        found_chats = []
        
        async for dialog in self.client.iter_dialogs():
            if dialog.is_group or dialog.is_channel:
                title_lower = dialog.title.lower()
                is_cargo_chat = any(keyword in title_lower for keyword in cargo_keywords)
                
                chat_info = {
                    'id': dialog.id,
                    'title': dialog.title,
                    'type': '–∫–∞–Ω–∞–ª' if dialog.is_channel else '–≥—Ä—É–ø–ø–∞',
                    'participants': getattr(dialog.entity, 'participants_count', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    'cargo_related': is_cargo_chat
                }
                
                found_chats.append(chat_info)
                
                status = "üöõ" if is_cargo_chat else "üí¨"
                logger.info(f"{status} {chat_info['type']}: {chat_info['title']} (ID: {chat_info['id']}, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {chat_info['participants']})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
        os.makedirs('config', exist_ok=True)
        with open('config/discovered_chats.json', 'w', encoding='utf-8') as f:
            json.dump(found_chats, f, ensure_ascii=False, indent=2)
        
        cargo_chats = [chat for chat in found_chats if chat['cargo_related']]
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(found_chats)} —á–∞—Ç–æ–≤, –∏–∑ –Ω–∏—Ö {len(cargo_chats)} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∞–º–∏")
    
    def setup_message_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ chat_id –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitored_ids = set()
        for chat in self.monitored_chats:
            if chat.get('enabled', True) and chat.get('chat_id'):
                cid = str(chat['chat_id'])
                monitored_ids.add(cid)
                if cid.startswith('-100'):
                    monitored_ids.add(cid[4:])
                if cid.startswith('-'):
                    monitored_ids.add(cid[1:])
        
        @self.client.on(events.NewMessage())
        async def handle_new_message(event):
            chat = await event.get_chat()
            chat_id_str = str(getattr(chat, 'id', ''))
            if chat_id_str not in monitored_ids:
                return
            await self.process_message(event)
        
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–æ–≤: {[c['chat_id'] for c in self.monitored_chats if c.get('enabled', True)]}")
    
    async def process_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            message = event.message
            chat = await event.get_chat()
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —á–∞—Ç–∞: {getattr(chat, 'title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {chat.id})")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞
            if hasattr(chat, 'title') and ("—Ç–µ—Å—Ç" in chat.title.lower() or "–∞–≤—Ç–æ–ª–æ–≥–∏—Å—Ç" in chat.title.lower()):
                logger.info(f"üß™ –¢–ï–°–¢–û–í–´–ô –ß–ê–¢: {chat.title}")
                logger.info(f"üß™ ID: {chat.id}")
                logger.info(f"üß™ –¢–∏–ø —á–∞—Ç–∞: megagroup={getattr(chat, 'megagroup', None)}, broadcast={getattr(chat, 'broadcast', None)}")
                logger.info(f"üß™ –¢–µ–∫—Å—Ç: {message.text[:100] if message.text else '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}...")
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è  
            if not (hasattr(chat, 'title') and (getattr(chat, 'megagroup', False) or getattr(chat, 'broadcast', False) or hasattr(chat, 'participants_count'))):
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø
                if not hasattr(chat, 'title'):
                    return  # –¢–æ—á–Ω–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
                logger.debug(f"üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∞—Ç {getattr(chat, 'title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: megagroup={getattr(chat, 'megagroup', None)}, broadcast={getattr(chat, 'broadcast', None)}")
                return
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not message.text:
                return
            
            self.stats['messages_processed'] += 1
            
            # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
            message_hash = self.create_message_hash(
                message.text, 
                str(message.sender_id), 
                str(chat.id)
            )
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if message_hash in self.processed_messages:
                return
            
            self.processed_messages.add(message_hash)
            
            # –ò—â–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –°–†–ê–ó–£
            chat_config = None
            chat_id_str = str(chat.id)
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞
            if "—Ç–µ—Å—Ç –∞–≤—Ç–æ–ª–æ–≥–∏—Å—Ç" in chat.title.lower():
                logger.info(f"üîç DEBUG: –ò—â–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è '{chat.title}' —Å ID: {chat_id_str}")
                config_list = [f"{c.get('title')} ({c.get('chat_id')})" for c in self.monitored_chats]
                logger.info(f"üîç DEBUG: –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_list}")
            
            for monitored_chat in self.monitored_chats:
                config_chat_id = str(monitored_chat.get('chat_id', ''))
                
                # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞
                if "—Ç–µ—Å—Ç –∞–≤—Ç–æ–ª–æ–≥–∏—Å—Ç" in chat.title.lower():
                    logger.info(f"üîç DEBUG: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º '{chat_id_str}' —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π '{config_chat_id}'")
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º ID —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ -100 –∏ –∑–Ω–∞–∫–æ–≤
                if (chat_id_str == config_chat_id or 
                    chat_id_str == config_chat_id.replace('-100', '') or
                    f'-100{chat_id_str}' == config_chat_id or
                    f'-{chat_id_str}' == config_chat_id or
                    chat_id_str == config_chat_id.replace('-', '')):
                    chat_config = monitored_chat
                    logger.info(f"üéØ –ù–∞–π–¥–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat.title}: {config_chat_id}")
                    break
            
            # –ü–†–û–ü–£–°–ö–ê–ï–ú —á–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if not chat_config or not chat_config.get('enabled', True):
                logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∞—Ç {chat.title} - –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω")
                return
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞ (—á–∞—Ç —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤—ã—à–µ)
            keywords_to_check = chat_config.get('keywords', [])
            logger.info(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–∞—Ç–∞ {chat.title}: {keywords_to_check}")
            
            # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ –ö–∞–ª–∂–∞—Ç
            if "–∫–∞–ª–∂–∞—Ç" in chat.title.lower():
                logger.info(f"üîé [–ö–∞–ª–∂–∞—Ç] –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}")
            is_cargo, found_keywords = self.is_cargo_related(message.text, keywords_to_check)
            if "–∫–∞–ª–∂–∞—Ç" in chat.title.lower():
                logger.info(f"üîé [–ö–∞–ª–∂–∞—Ç] –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞–π–¥–µ–Ω—ã: {found_keywords}")
            if is_cargo:
                await self.save_message(message, chat, message_hash, found_keywords)
                logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat.title} –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {', '.join(found_keywords)}")
            else:
                logger.debug(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat.title} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {message.text[:50]}...")
            
        except Exception as e:
            self.stats['errors'] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def save_message(self, message, chat, message_hash, found_keywords=None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Firebase –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
            sender = await message.get_sender()
            sender_name = ""
            sender_username = ""
            
            if sender:
                # –ü–æ–ª—É—á–∞–µ–º username (–Ω–∏–∫ —Å @)
                if hasattr(sender, 'username') and sender.username:
                    sender_username = sender.username
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if hasattr(sender, 'first_name') and sender.first_name:
                    sender_name = sender.first_name
                    if hasattr(sender, 'last_name') and sender.last_name:
                        sender_name += f" {sender.last_name}"
                elif hasattr(sender, 'title'):
                    sender_name = sender.title
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            message_data = {
                'text': message.text,
                'source': 'telegram',
                'chat_id': str(chat.id),
                'chat_title': chat.title,
                'message_id': str(message.id),
                'sender_id': str(message.sender_id) if message.sender_id else None,
                'sender_name': sender_name,
                'sender_username': sender_username,
                'timestamp': message.date.isoformat() if message.date else datetime.now().isoformat(),
                'processed': False,
                'hash': message_hash,
                'created_at': datetime.now().isoformat(),
                'keywords_found': found_keywords or []
            }
            
            if hasattr(self, 'use_local_storage') and self.use_local_storage:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –≤ JSON —Ñ–∞–π–ª
                filename = f"data/messages/message_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{message_hash[:8]}.json"
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(message_data, f, ensure_ascii=False, indent=2)
                logger.info(f"üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ: {filename}")
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
                doc_ref = self.db.collection('messages').add(message_data)
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Firebase: {doc_ref[1].id}")
            
            self.stats['messages_saved'] += 1
            
        except Exception as e:
            self.stats['errors'] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def get_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã"""
        uptime = datetime.now() - self.stats['start_time']
        return {
            **self.stats,
            'uptime': str(uptime),
            'cache_size': len(self.processed_messages)
        }
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞...")
        stats = await self.get_stats()
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        await self.client.disconnect()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    parser = TelegramParser()
    
    try:
        await parser.start()
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await parser.stop()

if __name__ == "__main__":
    print("üöõ Autologist Telegram Parser v2.0")
    print("=" * 40)
    asyncio.run(main())