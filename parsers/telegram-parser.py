"""
Telegram –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Telethon –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API
–í–µ—Ä—Å–∏—è 2.0 - —É–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
"""

import asyncio
import os
import hashlib
import json
from datetime import datetime, timedelta
from telethon import TelegramClient, events
from telethon.errors import SessionPasswordNeededError, FloodWaitError
import firebase_admin
from firebase_admin import credentials, firestore
from dotenv import load_dotenv
import logging
import time

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs('logs', exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/telegram_parser.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class TelegramParser:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –ø–∞—Ä—Å–µ—Ä–∞...")
        
        # Telegram API –¥–∞–Ω–Ω—ã–µ
        self.api_id = os.getenv('TELEGRAM_API_ID')
        self.api_hash = os.getenv('TELEGRAM_API_HASH')
        self.session_name = os.getenv('TELEGRAM_SESSION_NAME', 'autologist_session')
        
        if not self.api_id or not self.api_hash:
            logger.error("‚ùå TELEGRAM_API_ID –∏ TELEGRAM_API_HASH –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –¥–∞–Ω–Ω—ã–µ Telegram")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞
        self.client = TelegramClient(self.session_name, int(self.api_id), self.api_hash)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
        self.init_firebase()
        
        # –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ .env)
        self.monitored_chats = self.load_monitored_chats()
        
        # –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        self.processed_messages = set()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'messages_processed': 0,
            'messages_saved': 0,
            'errors': 0,
            'start_time': datetime.now()
        }
    
    def init_firebase(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase"""
        try:
            if not firebase_admin._apps:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                config_paths = [
                    'config/firebase-service-account.json',
                    'firebase-service-account.json',
                    os.getenv('FIREBASE_SERVICE_ACCOUNT_PATH', '')
                ]
                
                config_path = None
                for path in config_paths:
                    if path and os.path.exists(path):
                        config_path = path
                        break
                
                if config_path:
                    cred = credentials.Certificate(config_path)
                    firebase_admin.initialize_app(cred)
                    logger.info("‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Service Account")
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
                    project_id = os.getenv('FIREBASE_PROJECT_ID', 'autologist-91ecf')
                    firebase_admin.initialize_app(options={'projectId': project_id})
                    logger.info("‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Project ID")
            
            self.db = firestore.client()
            logger.info("‚úÖ Firestore –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase: {e}")
            raise
    
    def load_monitored_chats(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–æ–≤"""
        try:
            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if os.path.exists('config/monitored_chats.json'):
                with open('config/monitored_chats.json', 'r', encoding='utf-8') as f:
                    chats = json.load(f)
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(chats)} —á–∞—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                return chats
            else:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                example_chats = [
                    {
                        "name": "–ü—Ä–∏–º–µ—Ä –∫–∞–Ω–∞–ª–∞ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–æ–∫",
                        "username": "@cargo_channel_example",
                        "chat_id": None,
                        "keywords": ["–≥—Ä—É–∑", "–ø–µ—Ä–µ–≤–æ–∑–∫–∞", "–¥–æ—Å—Ç–∞–≤–∫–∞", "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"],
                        "enabled": False
                    }
                ]
                os.makedirs('config', exist_ok=True)
                with open('config/monitored_chats.json', 'w', encoding='utf-8') as f:
                    json.dump(example_chats, f, ensure_ascii=False, indent=2)
                logger.info("üìù –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ config/monitored_chats.json")
                return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}")
            return []
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –ø–∞—Ä—Å–µ—Ä–∞...")
        
        try:
            await self.client.start()
            logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            await self.get_chat_list()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            await self.monitor_messages()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            
    async def get_chat_list(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤"""
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤...")
        
        async for dialog in self.client.iter_dialogs():
            if dialog.is_group:
                chat_info = {
                    'id': dialog.id,
                    'title': dialog.title,
                    'participants': getattr(dialog.entity, 'participants_count', 0)
                }
                logger.info(f"–ù–∞–π–¥–µ–Ω —á–∞—Ç: {chat_info['title']} (ID: {chat_info['id']})")
                
    async def monitor_messages(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        @self.client.on(events.NewMessage())
        async def handler(event):
            await self.process_message(event)
            
        # –ó–∞–ø—É—Å–∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        await self.client.run_until_disconnected()
        
    async def process_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            message = event.message
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏–∑ –≥—Ä—É–ø–ø
            if not hasattr(event.chat, 'title'):
                return
                
            # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
            message_hash = self.create_message_hash(
                message.text or "", 
                str(message.sender_id)
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            if await self.is_duplicate(message_hash):
                logger.debug(f"–ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_hash}")
                return
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
            await self.save_message(message, event.chat, message_hash)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
    def create_message_hash(self, text, sender_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ö–µ—à–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏"""
        # –£–±–∏—Ä–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—Ü–µ–Ω—ã –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è)
        clean_text = ''.join(char for char in text if not char.isdigit())
        
        # –°–æ–∑–¥–∞–µ–º —Ö–µ—à
        hash_string = f"{clean_text}_{sender_id}"
        return hashlib.md5(hash_string.encode()).hexdigest()
        
    async def is_duplicate(self, message_hash):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–∫–∏–º –∂–µ —Ö–µ—à–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            yesterday = datetime.now() - timedelta(hours=24)
            
            docs = self.db.collection('raw_messages') \
                .where('hash', '==', message_hash) \
                .where('timestamp', '>=', yesterday) \
                .limit(1) \
                .get()
                
            return len(docs) > 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞: {e}")
            return False
            
    async def save_message(self, message, chat, message_hash):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Firebase"""
        try:
            doc_data = {
                'text': message.text or "",
                'timestamp': datetime.now(),
                'chat_id': chat.id,
                'chat_title': getattr(chat, 'title', 'Unknown'),
                'sender_id': message.sender_id,
                'message_id': message.id,
                'hash': message_hash,
                'processed': False,
                'has_media': message.media is not None
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é raw_messages
            doc_ref = self.db.collection('raw_messages').add(doc_data)
            
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat.title}: {message.text[:50]}...")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def get_chat_history(self, chat_id, limit=100):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ {chat_id} (–ª–∏–º–∏—Ç: {limit})")
        
        try:
            async for message in self.client.iter_messages(chat_id, limit=limit):
                await self.process_message_from_history(message, chat_id)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = TelegramParser()
    await parser.start()

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('logs', exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    asyncio.run(main())