"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Firebase Firestore
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏ messages –∏ cargos —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import firebase_admin
from firebase_admin import credentials, firestore
from datetime import datetime, timedelta
import random

def initialize_firebase():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin SDK"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ Firebase
        firebase_admin.get_app()
        print("‚úÖ Firebase —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except ValueError:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Application Default Credentials
        try:
            cred = credentials.ApplicationDefault()
            firebase_admin.initialize_app(cred, {
                'projectId': 'autologist-91ecf'
            })
            print("‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Application Default Credentials")
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase:", str(e))
            print("\nüìù –î–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é:")
            print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Google Cloud CLI")
            print("2. –í—ã–ø–æ–ª–Ω–∏—Ç—å: gcloud auth application-default login")
            print("3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Service Account Key")
            return None
    
    return firestore.client()

def create_test_messages(db):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\nüì® –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    test_messages = [
        {
            'text': '–ù—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ–∑—Ç–∏ –≥—Ä—É–∑ –∏–∑ –ú–æ—Å–∫–≤—ã –≤ –°–ü–±, 5 —Ç–æ–Ω–Ω, —Å—Ä–æ—á–Ω–æ –¥–æ –∑–∞–≤—Ç—Ä–∞',
            'source': 'telegram',
            'timestamp': datetime.now(),
            'processed': False,
            'chat_id': 'chat_123',
            'message_id': 'msg_001'
        },
        {
            'text': '–ò—â—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –º–µ–±–µ–ª–∏ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ -> –ß–µ–ª—è–±–∏–Ω—Å–∫, 2 —Ç–æ–Ω–Ω—ã',
            'source': 'whatsapp',
            'timestamp': datetime.now() - timedelta(hours=2),
            'processed': True,
            'chat_id': 'chat_456',
            'message_id': 'msg_002'
        },
        {
            'text': '–ï—Å—Ç—å –≥—Ä—É–∑ 10 —Ç–æ–Ω–Ω –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ - –û–º—Å–∫, –æ–ø–ª–∞—Ç–∞ —Å—Ä–∞–∑—É',
            'source': 'telegram',
            'timestamp': datetime.now() - timedelta(hours=5),
            'processed': False,
            'chat_id': 'chat_789',
            'message_id': 'msg_003'
        },
        {
            'text': '–ù—É–∂–Ω–∞ –≥–∞–∑–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –∫–æ—Ä–æ–±–æ–∫ –ø–æ –≥–æ—Ä–æ–¥—É, 500 –∫–≥ –º–∞–∫—Å–∏–º—É–º',
            'source': 'whatsapp',
            'timestamp': datetime.now() - timedelta(hours=8),
            'processed': True,
            'chat_id': 'chat_101',
            'message_id': 'msg_004'
        }
    ]
    
    messages_collection = db.collection('messages')
    
    for i, message_data in enumerate(test_messages, 1):
        try:
            doc_ref = messages_collection.add(message_data)
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {i} —Å–æ–∑–¥–∞–Ω–æ: {doc_ref[1].id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {i}: {str(e)}")

def create_test_cargos(db):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä—É–∑–æ–≤"""
    print("\nüì¶ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≥—Ä—É–∑—ã...")
    
    test_cargos = [
        {
            'from': '–ú–æ—Å–∫–≤–∞',
            'to': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
            'weight': 5.0,
            'price': 45000,
            'status': '–∞–∫—Ç–∏–≤–Ω—ã–π',
            'cargoType': '—Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã',
            'timestamp': datetime.now(),
            'contact': '+7 (900) 123-45-67',
            'description': '–ö–∏—Ä–ø–∏—á –∏ —Ü–µ–º–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä–æ–π–∫–∏',
            'urgent': True
        },
        {
            'from': '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
            'to': '–ß–µ–ª—è–±–∏–Ω—Å–∫',
            'weight': 2.0,
            'price': 25000,
            'status': '–≤ –ø—É—Ç–∏',
            'cargoType': '–º–µ–±–µ–ª—å',
            'timestamp': datetime.now() - timedelta(hours=3),
            'contact': '+7 (900) 234-56-78',
            'description': '–û—Ñ–∏—Å–Ω–∞—è –º–µ–±–µ–ª—å (—Å—Ç–æ–ª—ã, —Å—Ç—É–ª—å—è)',
            'urgent': False
        },
        {
            'from': '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
            'to': '–û–º—Å–∫',
            'weight': 10.0,
            'price': 80000,
            'status': '–∞–∫—Ç–∏–≤–Ω—ã–π',
            'cargoType': '–º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç',
            'timestamp': datetime.now() - timedelta(hours=6),
            'contact': '+7 (900) 345-67-89',
            'description': '–õ–∏—Å—Ç–æ–≤–∞—è —Å—Ç–∞–ª—å –∏ –ø—Ä–æ—Ñ–∏–ª—å',
            'urgent': True
        },
        {
            'from': '–ö–∞–∑–∞–Ω—å',
            'to': '–°–∞–º–∞—Ä–∞',
            'weight': 0.5,
            'price': 12000,
            'status': '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
            'cargoType': '–¥–æ–∫—É–º–µ–Ω—Ç—ã',
            'timestamp': datetime.now() - timedelta(days=1),
            'contact': '+7 (900) 456-78-90',
            'description': '–°—Ä–æ—á–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫—É—Ä—å–µ—Ä—Å–∫–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π',
            'urgent': False
        },
        {
            'from': '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É',
            'to': '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä',
            'weight': 8.0,
            'price': 60000,
            'status': '–∞–∫—Ç–∏–≤–Ω—ã–π',
            'cargoType': '–ø—Ä–æ–¥—É–∫—Ç—ã',
            'timestamp': datetime.now() - timedelta(hours=12),
            'contact': '+7 (900) 567-89-01',
            'description': '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, —Ä–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä',
            'urgent': True
        }
    ]
    
    cargos_collection = db.collection('cargos')
    
    for i, cargo_data in enumerate(test_cargos, 1):
        try:
            doc_ref = cargos_collection.add(cargo_data)
            print(f"‚úÖ –ì—Ä—É–∑ {i} —Å–æ–∑–¥–∞–Ω: {doc_ref[1].id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–∑–∞ {i}: {str(e)}")

def create_test_statistics(db):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("\nüìä –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    
    stats_data = {
        'totalMessages': 4,
        'processedMessages': 2,
        'totalCargos': 5,
        'activeCargos': 3,
        'totalRevenue': 222000,
        'lastUpdated': datetime.now(),
        'averageWeight': 5.1,
        'topRoutes': [
            {'route': '–ú–æ—Å–∫–≤–∞ - –°–ü–±', 'count': 1},
            {'route': '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ - –ß–µ–ª—è–±–∏–Ω—Å–∫', 'count': 1},
            {'route': '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ - –û–º—Å–∫', 'count': 1}
        ]
    }
    
    try:
        db.collection('statistics').document('main').set(stats_data)
        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Autologist...")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
    db = initialize_firebase()
    if db is None:
        return
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        create_test_messages(db)
        create_test_cargos(db)
        create_test_statistics(db)
        
        print("\n" + "=" * 50)
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        print("\nüìã –ß—Ç–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ:")
        print("‚Ä¢ 4 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ 'messages'")
        print("‚Ä¢ 5 —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ 'cargos'") 
        print("‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ 'statistics'")
        print("\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ:")
        print("1. –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
        print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
        
    except Exception as e:
        print(f"\n‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main()