"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram –ø–∞—Ä—Å–µ—Ä–∞
–ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á–∏ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
"""

import os
import asyncio
from telethon import TelegramClient
from dotenv import load_dotenv

load_dotenv()

async def setup_telegram():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram API"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –ø–∞—Ä—Å–µ—Ä–∞")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –¥–∞–Ω–Ω—ã—Ö
    api_id = os.getenv('TELEGRAM_API_ID')
    api_hash = os.getenv('TELEGRAM_API_HASH')
    
    if not api_id or not api_hash:
        print("‚ùå API –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
        print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é API:")
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://my.telegram.org")
        print("2. –í–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        print("3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ 'API development tools'")
        print("4. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
        print("   - App title: Autologist Parser")
        print("   - Short name: autologist")
        print("   - Platform: Desktop")
        print("   - Description: Cargo transportation automation")
        print("5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ api_id –∏ api_hash")
        print("6. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ:")
        print("   TELEGRAM_API_ID=–≤–∞—à_api_id")
        print("   TELEGRAM_API_HASH=–≤–∞—à_api_hash")
        return False
    
    print(f"‚úÖ API ID –Ω–∞–π–¥–µ–Ω: {api_id}")
    print("‚úÖ API Hash –Ω–∞–π–¥–µ–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    try:
        client = TelegramClient('test_session', int(api_id), api_hash)
        
        print("\nüîå –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
        await client.start()
        
        me = await client.get_me()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} (@{me.username})")
        print(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {me.phone}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤
        print("\nüìã –í–∞—à–∏ –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã:")
        groups_count = 0
        cargo_groups = []
        
        async for dialog in client.iter_dialogs(limit=50):
            if dialog.is_group or dialog.is_channel:
                groups_count += 1
                title_lower = dialog.title.lower()
                
                # –ò—â–µ–º –≥—Ä—É–ø–ø—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∞–º–∏
                cargo_keywords = ['–≥—Ä—É–∑', '–ø–µ—Ä–µ–≤–æ–∑–∫–∞', '–¥–æ—Å—Ç–∞–≤–∫–∞', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ª–æ–≥–∏—Å—Ç–∏–∫–∞', '—Ñ—É—Ä–∞']
                is_cargo = any(keyword in title_lower for keyword in cargo_keywords)
                
                if is_cargo:
                    cargo_groups.append({
                        'title': dialog.title,
                        'id': dialog.id,
                        'type': '–∫–∞–Ω–∞–ª' if dialog.is_channel else '–≥—Ä—É–ø–ø–∞'
                    })
                
                status = "üöõ" if is_cargo else "üí¨"
                group_type = "–∫–∞–Ω–∞–ª" if dialog.is_channel else "–≥—Ä—É–ø–ø–∞"
                print(f"{status} {dialog.title} ({group_type}) - ID: {dialog.id}")
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤: {groups_count}")
        print(f"   –°–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∞–º–∏: {len(cargo_groups)}")
        
        if cargo_groups:
            print(f"\nüöõ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
            for group in cargo_groups:
                print(f"   ‚Ä¢ {group['title']} ({group['type']}) - ID: {group['id']}")
        
        await client.disconnect()
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
        if os.path.exists('test_session.session'):
            os.remove('test_session.session')
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöõ Autologist Telegram Parser Setup")
    print("=" * 40)
    
    success = await setup_telegram()
    
    if success:
        print("\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   python parsers/telegram_parser_v2.py")
        print("\nüìù –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ:")
        print("   config/monitored_chats.json")
    else:
        print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print("üìñ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤—ã—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–µ–π")

if __name__ == "__main__":
    asyncio.run(main())