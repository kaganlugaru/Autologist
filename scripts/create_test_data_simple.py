"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Firebase REST API
–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import requests
import json
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ Firebase
PROJECT_ID = "autologist-91ecf"
BASE_URL = f"https://firestore.googleapis.com/v1/projects/{PROJECT_ID}/databases/(default)/documents"

def create_test_messages():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\nüì® –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    test_messages = [
        {
            "fields": {
                "text": {"stringValue": "–ù—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ–∑—Ç–∏ –≥—Ä—É–∑ –∏–∑ –ú–æ—Å–∫–≤—ã –≤ –°–ü–±, 5 —Ç–æ–Ω–Ω, —Å—Ä–æ—á–Ω–æ –¥–æ –∑–∞–≤—Ç—Ä–∞"},
                "source": {"stringValue": "telegram"},
                "timestamp": {"timestampValue": datetime.now().isoformat() + "Z"},
                "processed": {"booleanValue": False},
                "chat_id": {"stringValue": "chat_123"},
                "message_id": {"stringValue": "msg_001"}
            }
        },
        {
            "fields": {
                "text": {"stringValue": "–ò—â—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –º–µ–±–µ–ª–∏ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ -> –ß–µ–ª—è–±–∏–Ω—Å–∫, 2 —Ç–æ–Ω–Ω—ã"},
                "source": {"stringValue": "whatsapp"},
                "timestamp": {"timestampValue": (datetime.now() - timedelta(hours=2)).isoformat() + "Z"},
                "processed": {"booleanValue": True},
                "chat_id": {"stringValue": "chat_456"},
                "message_id": {"stringValue": "msg_002"}
            }
        },
        {
            "fields": {
                "text": {"stringValue": "–ï—Å—Ç—å –≥—Ä—É–∑ 10 —Ç–æ–Ω–Ω –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ - –û–º—Å–∫, –æ–ø–ª–∞—Ç–∞ —Å—Ä–∞–∑—É"},
                "source": {"stringValue": "telegram"},
                "timestamp": {"timestampValue": (datetime.now() - timedelta(hours=5)).isoformat() + "Z"},
                "processed": {"booleanValue": False},
                "chat_id": {"stringValue": "chat_789"},
                "message_id": {"stringValue": "msg_003"}
            }
        },
        {
            "fields": {
                "text": {"stringValue": "–ù—É–∂–Ω–∞ –≥–∞–∑–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –∫–æ—Ä–æ–±–æ–∫ –ø–æ –≥–æ—Ä–æ–¥—É, 500 –∫–≥ –º–∞–∫—Å–∏–º—É–º"},
                "source": {"stringValue": "whatsapp"},
                "timestamp": {"timestampValue": (datetime.now() - timedelta(hours=8)).isoformat() + "Z"},
                "processed": {"booleanValue": True},
                "chat_id": {"stringValue": "chat_101"},
                "message_id": {"stringValue": "msg_004"}
            }
        }
    ]
    
    for i, message_data in enumerate(test_messages, 1):
        try:
            response = requests.post(
                f"{BASE_URL}/messages",
                headers={"Content-Type": "application/json"},
                data=json.dumps(message_data)
            )
            if response.status_code == 200:
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {i} —Å–æ–∑–¥–∞–Ω–æ")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {i}: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {i}: {str(e)}")

def create_test_cargos():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä—É–∑–æ–≤"""
    print("\nüì¶ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≥—Ä—É–∑—ã...")
    
    test_cargos = [
        {
            "fields": {
                "from": {"stringValue": "–ú–æ—Å–∫–≤–∞"},
                "to": {"stringValue": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"},
                "weight": {"doubleValue": 5.0},
                "price": {"integerValue": "45000"},
                "status": {"stringValue": "–∞–∫—Ç–∏–≤–Ω—ã–π"},
                "cargoType": {"stringValue": "—Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã"},
                "timestamp": {"timestampValue": datetime.now().isoformat() + "Z"},
                "contact": {"stringValue": "+7 (900) 123-45-67"},
                "description": {"stringValue": "–ö–∏—Ä–ø–∏—á –∏ —Ü–µ–º–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä–æ–π–∫–∏"},
                "urgent": {"booleanValue": True}
            }
        },
        {
            "fields": {
                "from": {"stringValue": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"},
                "to": {"stringValue": "–ß–µ–ª—è–±–∏–Ω—Å–∫"},
                "weight": {"doubleValue": 2.0},
                "price": {"integerValue": "25000"},
                "status": {"stringValue": "–≤ –ø—É—Ç–∏"},
                "cargoType": {"stringValue": "–º–µ–±–µ–ª—å"},
                "timestamp": {"timestampValue": (datetime.now() - timedelta(hours=3)).isoformat() + "Z"},
                "contact": {"stringValue": "+7 (900) 234-56-78"},
                "description": {"stringValue": "–û—Ñ–∏—Å–Ω–∞—è –º–µ–±–µ–ª—å (—Å—Ç–æ–ª—ã, —Å—Ç—É–ª—å—è)"},
                "urgent": {"booleanValue": False}
            }
        },
        {
            "fields": {
                "from": {"stringValue": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"},
                "to": {"stringValue": "–û–º—Å–∫"},
                "weight": {"doubleValue": 10.0},
                "price": {"integerValue": "80000"},
                "status": {"stringValue": "–∞–∫—Ç–∏–≤–Ω—ã–π"},
                "cargoType": {"stringValue": "–º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç"},
                "timestamp": {"timestampValue": (datetime.now() - timedelta(hours=6)).isoformat() + "Z"},
                "contact": {"stringValue": "+7 (900) 345-67-89"},
                "description": {"stringValue": "–õ–∏—Å—Ç–æ–≤–∞—è —Å—Ç–∞–ª—å –∏ –ø—Ä–æ—Ñ–∏–ª—å"},
                "urgent": {"booleanValue": True}
            }
        },
        {
            "fields": {
                "from": {"stringValue": "–ö–∞–∑–∞–Ω—å"},
                "to": {"stringValue": "–°–∞–º–∞—Ä–∞"},
                "weight": {"doubleValue": 0.5},
                "price": {"integerValue": "12000"},
                "status": {"stringValue": "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"},
                "cargoType": {"stringValue": "–¥–æ–∫—É–º–µ–Ω—Ç—ã"},
                "timestamp": {"timestampValue": (datetime.now() - timedelta(days=1)).isoformat() + "Z"},
                "contact": {"stringValue": "+7 (900) 456-78-90"},
                "description": {"stringValue": "–°—Ä–æ—á–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫—É—Ä—å–µ—Ä—Å–∫–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π"},
                "urgent": {"booleanValue": False}
            }
        },
        {
            "fields": {
                "from": {"stringValue": "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É"},
                "to": {"stringValue": "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"},
                "weight": {"doubleValue": 8.0},
                "price": {"integerValue": "60000"},
                "status": {"stringValue": "–∞–∫—Ç–∏–≤–Ω—ã–π"},
                "cargoType": {"stringValue": "–ø—Ä–æ–¥—É–∫—Ç—ã"},
                "timestamp": {"timestampValue": (datetime.now() - timedelta(hours=12)).isoformat() + "Z"},
                "contact": {"stringValue": "+7 (900) 567-89-01"},
                "description": {"stringValue": "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, —Ä–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä"},
                "urgent": {"booleanValue": True}
            }
        }
    ]
    
    for i, cargo_data in enumerate(test_cargos, 1):
        try:
            response = requests.post(
                f"{BASE_URL}/cargos",
                headers={"Content-Type": "application/json"},
                data=json.dumps(cargo_data)
            )
            if response.status_code == 200:
                print(f"‚úÖ –ì—Ä—É–∑ {i} —Å–æ–∑–¥–∞–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–∑–∞ {i}: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥—Ä—É–∑–∞ {i}: {str(e)}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Autologist...")
    print("=" * 50)
    print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–µ–∫—Ç—É: {PROJECT_ID}")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        create_test_messages()
        create_test_cargos()
        
        print("\n" + "=" * 50)
        print("üéâ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("\nüìã –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:")
        print("‚Ä¢ 4 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ 'messages'")
        print("‚Ä¢ 5 —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ 'cargos'")
        print("\nüí° –¢–µ–ø–µ—Ä—å:")
        print("1. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (F5)")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
        print("3. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ Firebase Console")
        
    except Exception as e:
        print(f"\n‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main()